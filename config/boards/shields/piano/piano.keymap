/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

#define AS(keycode) &td LS(keycode) keycode

// Layers
#define AL1 0
#define AL2 1
#define NUM 2
#define NAV 3
#define FUN 4
/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <30>;
            key-positions = <14 15>;
            bindings = <&kp ESC>;
        };

        combo_enter {
            timeout-ms = <30>;
            key-positions = <17 18>;
            bindings = <&kp ENTER>;
        };
    };

    behaviors {
        td: tap_dance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_DANCE";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
    //      0   1   2       3   4   5
    //  6   7   8   9       10  11  12  13
    //          14  15      16  17
    keymap {
        compatible = "zmk,keymap";

        alpha1 {
            bindings = <
                                &td LC(C) W     &td LC(S) F     &td LC(V) P                 &kp L           &kp U           &kp Y
                &mt LGUI A      &mt LALT R      &mt LSHIFT S    &mt LCTL T                  &mt RCTL N      &mt RSHIFT E    &mt RALT I      &mt RGUI O
                                                &lt AL2 TAB     &lt NAV SPC                 &lt NM1 BSPC    &lt FUN DEL
            >;
        };

        alpha2 {
            bindings = <
                                &kp AS(B)       &kp AS(G)       &kp AS(V)                   &kp AS(K)       &kp AS(M)       &kp AS(J)
                &kp AS(Q)       &kp AS(Z)       &kp AS(X)       &kp AS(C)                   &kp AS(H)       &kp AS(DOT)     &kp AS(COMMA)   &kp AS(FSLH)
                                                &none           &none                       &kp AS(SQT)     &kp AS(SEMI)
            >;
        };

        num {
            bindings = <
                                &kp AS(N1)      &kp AS(N2)      &kp AS(N3)                  &kp AS(N7)      &kp AS(N8)      &kp AS(N9)
                &kp AS(GRAVE)   &kp AS(N4)      &kp AS(N5)      &kp AS(N6)                  &kp AS(N0)      &kp AS(LBKT)    &kp AS(RBKT)    &kp RPAR
                                                &kp AS(MINUS)   &kp AS(EQUAL)               &none           &kp LPAR
            >;
        };

        fun {
            bindings = <
                                &kp PSCRN       &kp F2          &kp F5                      &kp LC(Z)       &none           &kp LC(Y)
                &none           &kp F10         &kp F11         &td LC(F12) F12             &none           &none           &none           &none
                                                &none           &none                       &none           &none
            >;
        };
    };
};
