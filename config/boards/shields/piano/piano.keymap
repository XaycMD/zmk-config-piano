/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/mouse.h>

&mt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

&lt {
    tapping-term-ms = <200>;
    flavor = "tap-preferred";
};

#define AS(keycode) &as LS(keycode) keycode

// Layers
#define AL1 0
#define AL2 1
#define NUM 2
#define NAV 3
#define FUN 4
/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <30>;
            key-positions = <14 15>;
            bindings = <&kp ESC>;
        };

        combo_enter {
            timeout-ms = <30>;
            key-positions = <16 17>;
            bindings = <&kp ENTER>;
        };
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTO_SHIFT";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    //      0   1   2       3   4   5
    //  6   7   8   9       10  11  12  13
    //          14  15      16  17
    keymap {
        compatible = "zmk,keymap";

        alpha1 {
            bindings = <
                                &as LC(C) W     &as LC(X) F     &as LC(V) P                 &as LC(Z) L     &as LC(S) U     &as LC(Y) Y
                &mt LGUI A      &mt LALT R      &mt LSHIFT S    &mt LCTL T                  &mt RCTL N      &mt RSHIFT E    &mt RALT I      &mt RGUI O
                                                &lt AL2 TAB     &lt NAV SPC                 &lt NUM BSPC    &lt FUN DEL
            >;
        };

        alpha2 {
            bindings = <
                                AS(B)           AS(G)           AS(V)                       AS(K)           AS(M)           AS(J)
                AS(Q)           AS(Z)           AS(X)           AS(C)                       AS(H)           AS(D)         AS(FSLSH)         AS(SEMI)
                                                &none           &none                       AS(DOT)         AS(COMMA)
            >;
        };

        num {
            bindings = <
                                AS(N1)          AS(N2)          AS(N3)                      AS(N7)          AS(N8)          AS(N9)
                AS(GRAVE)       AS(N4)          AS(N5)          AS(N6)                      AS(N0)          AS(LBKT)        AS(RBKT)        &kp RPAR
                                                AS(MINUS)       AS(EQUAL)                   &none           &kp LPAR
            >;
        };

        nav {
            bindings = <
                                &none           &kp PG_UP       &none                       &none           &kp UP          &none
                &none           &kp HOME        &kp PG_DN       &kp END                     &kp LEFT        &kp DOWN        &kp RIGHT       &none
                                                &none           &none                       &none           &none
            >;
        };

        fun {
            bindings = <
                                &kp PSCRN       &kp F2          &kp F5                      &none           &none           &none
                &none           &kp F10         &kp F11         &as LC(F12) F12             AS(SQT)         &none           &none           &none
                                                &none           &none                       &none           &none
            >;
        };
    };
};
